/**
 * Autogenerated by Thrift Compiler (0.11.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.wch.course.thrift.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class IUserService {

    /**
     * 用户信息服务
     */
    public interface Iface {

        /**
         * 通过用户编号查询用户信息
         *
         * @param id
         */
        public com.wch.course.thrift.domain.UserInfo queryUserById(int id) throws org.apache.thrift.TException;

        /**
         * 通过用户名查询用户信息
         *
         * @param username
         */
        public com.wch.course.thrift.domain.UserInfo queryUserByName(java.lang.String username) throws org.apache.thrift.TException;

        /**
         * 新增用户
         *
         * @param userInfo
         */
        public void addUser(com.wch.course.thrift.domain.UserInfo userInfo) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void queryUserById(int id, org.apache.thrift.async.AsyncMethodCallback<com.wch.course.thrift.domain.UserInfo> resultHandler) throws org.apache.thrift.TException;

        public void queryUserByName(java.lang.String username, org.apache.thrift.async.AsyncMethodCallback<com.wch.course.thrift.domain.UserInfo> resultHandler) throws org.apache.thrift.TException;

        public void addUser(com.wch.course.thrift.domain.UserInfo userInfo, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public com.wch.course.thrift.domain.UserInfo queryUserById(int id) throws org.apache.thrift.TException {
            send_queryUserById(id);
            return recv_queryUserById();
        }

        public void send_queryUserById(int id) throws org.apache.thrift.TException {
            queryUserById_args args = new queryUserById_args();
            args.setId(id);
            sendBase("queryUserById", args);
        }

        public com.wch.course.thrift.domain.UserInfo recv_queryUserById() throws org.apache.thrift.TException {
            queryUserById_result result = new queryUserById_result();
            receiveBase(result, "queryUserById");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryUserById failed: unknown result");
        }

        public com.wch.course.thrift.domain.UserInfo queryUserByName(java.lang.String username) throws org.apache.thrift.TException {
            send_queryUserByName(username);
            return recv_queryUserByName();
        }

        public void send_queryUserByName(java.lang.String username) throws org.apache.thrift.TException {
            queryUserByName_args args = new queryUserByName_args();
            args.setUsername(username);
            sendBase("queryUserByName", args);
        }

        public com.wch.course.thrift.domain.UserInfo recv_queryUserByName() throws org.apache.thrift.TException {
            queryUserByName_result result = new queryUserByName_result();
            receiveBase(result, "queryUserByName");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryUserByName failed: unknown result");
        }

        public void addUser(com.wch.course.thrift.domain.UserInfo userInfo) throws org.apache.thrift.TException {
            send_addUser(userInfo);
            recv_addUser();
        }

        public void send_addUser(com.wch.course.thrift.domain.UserInfo userInfo) throws org.apache.thrift.TException {
            addUser_args args = new addUser_args();
            args.setUserInfo(userInfo);
            sendBase("addUser", args);
        }

        public void recv_addUser() throws org.apache.thrift.TException {
            addUser_result result = new addUser_result();
            receiveBase(result, "addUser");
            return;
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void queryUserById(int id, org.apache.thrift.async.AsyncMethodCallback<com.wch.course.thrift.domain.UserInfo> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            queryUserById_call method_call = new queryUserById_call(id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class queryUserById_call extends org.apache.thrift.async.TAsyncMethodCall<com.wch.course.thrift.domain.UserInfo> {
            private int id;

            public queryUserById_call(int id, org.apache.thrift.async.AsyncMethodCallback<com.wch.course.thrift.domain.UserInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.id = id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryUserById", org.apache.thrift.protocol.TMessageType.CALL, 0));
                queryUserById_args args = new queryUserById_args();
                args.setId(id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.wch.course.thrift.domain.UserInfo getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_queryUserById();
            }
        }

        public void queryUserByName(java.lang.String username, org.apache.thrift.async.AsyncMethodCallback<com.wch.course.thrift.domain.UserInfo> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            queryUserByName_call method_call = new queryUserByName_call(username, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class queryUserByName_call extends org.apache.thrift.async.TAsyncMethodCall<com.wch.course.thrift.domain.UserInfo> {
            private java.lang.String username;

            public queryUserByName_call(java.lang.String username, org.apache.thrift.async.AsyncMethodCallback<com.wch.course.thrift.domain.UserInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.username = username;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryUserByName", org.apache.thrift.protocol.TMessageType.CALL, 0));
                queryUserByName_args args = new queryUserByName_args();
                args.setUsername(username);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public com.wch.course.thrift.domain.UserInfo getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_queryUserByName();
            }
        }

        public void addUser(com.wch.course.thrift.domain.UserInfo userInfo, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            addUser_call method_call = new addUser_call(userInfo, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class addUser_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private com.wch.course.thrift.domain.UserInfo userInfo;

            public addUser_call(com.wch.course.thrift.domain.UserInfo userInfo, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userInfo = userInfo;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
                addUser_args args = new addUser_args();
                args.setUserInfo(userInfo);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("queryUserById", new queryUserById());
            processMap.put("queryUserByName", new queryUserByName());
            processMap.put("addUser", new addUser());
            return processMap;
        }

        public static class queryUserById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryUserById_args> {
            public queryUserById() {
                super("queryUserById");
            }

            public queryUserById_args getEmptyArgsInstance() {
                return new queryUserById_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean handleRuntimeExceptions() {
                return false;
            }

            public queryUserById_result getResult(I iface, queryUserById_args args) throws org.apache.thrift.TException {
                queryUserById_result result = new queryUserById_result();
                result.success = iface.queryUserById(args.id);
                return result;
            }
        }

        public static class queryUserByName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryUserByName_args> {
            public queryUserByName() {
                super("queryUserByName");
            }

            public queryUserByName_args getEmptyArgsInstance() {
                return new queryUserByName_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean handleRuntimeExceptions() {
                return false;
            }

            public queryUserByName_result getResult(I iface, queryUserByName_args args) throws org.apache.thrift.TException {
                queryUserByName_result result = new queryUserByName_result();
                result.success = iface.queryUserByName(args.username);
                return result;
            }
        }

        public static class addUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addUser_args> {
            public addUser() {
                super("addUser");
            }

            public addUser_args getEmptyArgsInstance() {
                return new addUser_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean handleRuntimeExceptions() {
                return false;
            }

            public addUser_result getResult(I iface, addUser_args args) throws org.apache.thrift.TException {
                addUser_result result = new addUser_result();
                iface.addUser(args.userInfo);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("queryUserById", new queryUserById());
            processMap.put("queryUserByName", new queryUserByName());
            processMap.put("addUser", new addUser());
            return processMap;
        }

        public static class queryUserById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryUserById_args, com.wch.course.thrift.domain.UserInfo> {
            public queryUserById() {
                super("queryUserById");
            }

            public queryUserById_args getEmptyArgsInstance() {
                return new queryUserById_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.wch.course.thrift.domain.UserInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.wch.course.thrift.domain.UserInfo>() {
                    public void onComplete(com.wch.course.thrift.domain.UserInfo o) {
                        queryUserById_result result = new queryUserById_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        queryUserById_result result = new queryUserById_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, queryUserById_args args, org.apache.thrift.async.AsyncMethodCallback<com.wch.course.thrift.domain.UserInfo> resultHandler) throws org.apache.thrift.TException {
                iface.queryUserById(args.id, resultHandler);
            }
        }

        public static class queryUserByName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryUserByName_args, com.wch.course.thrift.domain.UserInfo> {
            public queryUserByName() {
                super("queryUserByName");
            }

            public queryUserByName_args getEmptyArgsInstance() {
                return new queryUserByName_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<com.wch.course.thrift.domain.UserInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<com.wch.course.thrift.domain.UserInfo>() {
                    public void onComplete(com.wch.course.thrift.domain.UserInfo o) {
                        queryUserByName_result result = new queryUserByName_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        queryUserByName_result result = new queryUserByName_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, queryUserByName_args args, org.apache.thrift.async.AsyncMethodCallback<com.wch.course.thrift.domain.UserInfo> resultHandler) throws org.apache.thrift.TException {
                iface.queryUserByName(args.username, resultHandler);
            }
        }

        public static class addUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addUser_args, Void> {
            public addUser() {
                super("addUser");
            }

            public addUser_args getEmptyArgsInstance() {
                return new addUser_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        addUser_result result = new addUser_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        addUser_result result = new addUser_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, addUser_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.addUser(args.userInfo, resultHandler);
            }
        }

    }

    public static class queryUserById_args implements org.apache.thrift.TBase<queryUserById_args, queryUserById_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryUserById_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryUserById_args");

        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryUserById_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryUserById_argsTupleSchemeFactory();

        public int id; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ID((short) 1, "id");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // ID
                        return ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __ID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "INT")));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryUserById_args.class, metaDataMap);
        }

        public queryUserById_args() {
        }

        public queryUserById_args(
                int id) {
            this();
            this.id = id;
            setIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryUserById_args(queryUserById_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.id = other.id;
        }

        public queryUserById_args deepCopy() {
            return new queryUserById_args(this);
        }

        @Override
        public void clear() {
            setIdIsSet(false);
            this.id = 0;
        }

        public int getId() {
            return this.id;
        }

        public queryUserById_args setId(int id) {
            this.id = id;
            setIdIsSet(true);
            return this;
        }

        public void unsetId() {
            __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
        }

        public void setIdIsSet(boolean value) {
            __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((java.lang.Integer) value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ID:
                    return getId();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ID:
                    return isSetId();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof queryUserById_args)
                return this.equals((queryUserById_args) that);
            return false;
        }

        public boolean equals(queryUserById_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_id = true;
            boolean that_present_id = true;
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (this.id != that.id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + id;

            return hashCode;
        }

        @Override
        public int compareTo(queryUserById_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("queryUserById_args(");
            boolean first = true;

            sb.append("id:");
            sb.append(this.id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryUserById_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryUserById_argsStandardScheme getScheme() {
                return new queryUserById_argsStandardScheme();
            }
        }

        private static class queryUserById_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryUserById_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryUserById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.id = iprot.readI32();
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryUserById_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI32(struct.id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryUserById_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryUserById_argsTupleScheme getScheme() {
                return new queryUserById_argsTupleScheme();
            }
        }

        private static class queryUserById_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryUserById_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryUserById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetId()) {
                    oprot.writeI32(struct.id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryUserById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.id = iprot.readI32();
                    struct.setIdIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryUserById_result implements org.apache.thrift.TBase<queryUserById_result, queryUserById_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryUserById_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryUserById_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryUserById_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryUserById_resultTupleSchemeFactory();

        public com.wch.course.thrift.domain.UserInfo success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT, "UserInfo")));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryUserById_result.class, metaDataMap);
        }

        public queryUserById_result() {
        }

        public queryUserById_result(
                com.wch.course.thrift.domain.UserInfo success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryUserById_result(queryUserById_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.wch.course.thrift.domain.UserInfo(other.success);
            }
        }

        public queryUserById_result deepCopy() {
            return new queryUserById_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.wch.course.thrift.domain.UserInfo getSuccess() {
            return this.success;
        }

        public queryUserById_result setSuccess(com.wch.course.thrift.domain.UserInfo success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.wch.course.thrift.domain.UserInfo) value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof queryUserById_result)
                return this.equals((queryUserById_result) that);
            return false;
        }

        public boolean equals(queryUserById_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryUserById_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("queryUserById_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryUserById_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryUserById_resultStandardScheme getScheme() {
                return new queryUserById_resultStandardScheme();
            }
        }

        private static class queryUserById_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryUserById_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryUserById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.wch.course.thrift.domain.UserInfo();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryUserById_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryUserById_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryUserById_resultTupleScheme getScheme() {
                return new queryUserById_resultTupleScheme();
            }
        }

        private static class queryUserById_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryUserById_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryUserById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryUserById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.wch.course.thrift.domain.UserInfo();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryUserByName_args implements org.apache.thrift.TBase<queryUserByName_args, queryUserByName_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryUserByName_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryUserByName_args");

        private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryUserByName_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryUserByName_argsTupleSchemeFactory();

        public java.lang.String username; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USERNAME((short) 1, "username");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // USERNAME
                        return USERNAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryUserByName_args.class, metaDataMap);
        }

        public queryUserByName_args() {
        }

        public queryUserByName_args(
                java.lang.String username) {
            this();
            this.username = username;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryUserByName_args(queryUserByName_args other) {
            if (other.isSetUsername()) {
                this.username = other.username;
            }
        }

        public queryUserByName_args deepCopy() {
            return new queryUserByName_args(this);
        }

        @Override
        public void clear() {
            this.username = null;
        }

        public java.lang.String getUsername() {
            return this.username;
        }

        public queryUserByName_args setUsername(java.lang.String username) {
            this.username = username;
            return this;
        }

        public void unsetUsername() {
            this.username = null;
        }

        /** Returns true if field username is set (has been assigned a value) and false otherwise */
        public boolean isSetUsername() {
            return this.username != null;
        }

        public void setUsernameIsSet(boolean value) {
            if (!value) {
                this.username = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case USERNAME:
                    if (value == null) {
                        unsetUsername();
                    } else {
                        setUsername((java.lang.String) value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case USERNAME:
                    return getUsername();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case USERNAME:
                    return isSetUsername();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof queryUserByName_args)
                return this.equals((queryUserByName_args) that);
            return false;
        }

        public boolean equals(queryUserByName_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_username = true && this.isSetUsername();
            boolean that_present_username = true && that.isSetUsername();
            if (this_present_username || that_present_username) {
                if (!(this_present_username && that_present_username))
                    return false;
                if (!this.username.equals(that.username))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
            if (isSetUsername())
                hashCode = hashCode * 8191 + username.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryUserByName_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUsername()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("queryUserByName_args(");
            boolean first = true;

            sb.append("username:");
            if (this.username == null) {
                sb.append("null");
            } else {
                sb.append(this.username);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryUserByName_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryUserByName_argsStandardScheme getScheme() {
                return new queryUserByName_argsStandardScheme();
            }
        }

        private static class queryUserByName_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryUserByName_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryUserByName_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USERNAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.username = iprot.readString();
                                struct.setUsernameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryUserByName_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.username != null) {
                    oprot.writeFieldBegin(USERNAME_FIELD_DESC);
                    oprot.writeString(struct.username);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryUserByName_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryUserByName_argsTupleScheme getScheme() {
                return new queryUserByName_argsTupleScheme();
            }
        }

        private static class queryUserByName_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryUserByName_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryUserByName_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetUsername()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetUsername()) {
                    oprot.writeString(struct.username);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryUserByName_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.username = iprot.readString();
                    struct.setUsernameIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryUserByName_result implements org.apache.thrift.TBase<queryUserByName_result, queryUserByName_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryUserByName_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryUserByName_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryUserByName_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryUserByName_resultTupleSchemeFactory();

        public com.wch.course.thrift.domain.UserInfo success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT, "UserInfo")));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryUserByName_result.class, metaDataMap);
        }

        public queryUserByName_result() {
        }

        public queryUserByName_result(
                com.wch.course.thrift.domain.UserInfo success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryUserByName_result(queryUserByName_result other) {
            if (other.isSetSuccess()) {
                this.success = new com.wch.course.thrift.domain.UserInfo(other.success);
            }
        }

        public queryUserByName_result deepCopy() {
            return new queryUserByName_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public com.wch.course.thrift.domain.UserInfo getSuccess() {
            return this.success;
        }

        public queryUserByName_result setSuccess(com.wch.course.thrift.domain.UserInfo success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((com.wch.course.thrift.domain.UserInfo) value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof queryUserByName_result)
                return this.equals((queryUserByName_result) that);
            return false;
        }

        public boolean equals(queryUserByName_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryUserByName_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("queryUserByName_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryUserByName_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryUserByName_resultStandardScheme getScheme() {
                return new queryUserByName_resultStandardScheme();
            }
        }

        private static class queryUserByName_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryUserByName_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryUserByName_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new com.wch.course.thrift.domain.UserInfo();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryUserByName_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryUserByName_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryUserByName_resultTupleScheme getScheme() {
                return new queryUserByName_resultTupleScheme();
            }
        }

        private static class queryUserByName_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryUserByName_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryUserByName_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryUserByName_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new com.wch.course.thrift.domain.UserInfo();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addUser_args implements org.apache.thrift.TBase<addUser_args, addUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<addUser_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addUser_args");

        private static final org.apache.thrift.protocol.TField USER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("userInfo", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addUser_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addUser_argsTupleSchemeFactory();

        public com.wch.course.thrift.domain.UserInfo userInfo; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_INFO((short) 1, "userInfo");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // USER_INFO
                        return USER_INFO;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_INFO, new org.apache.thrift.meta_data.FieldMetaData("userInfo", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT, "UserInfo")));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addUser_args.class, metaDataMap);
        }

        public addUser_args() {
        }

        public addUser_args(
                com.wch.course.thrift.domain.UserInfo userInfo) {
            this();
            this.userInfo = userInfo;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addUser_args(addUser_args other) {
            if (other.isSetUserInfo()) {
                this.userInfo = new com.wch.course.thrift.domain.UserInfo(other.userInfo);
            }
        }

        public addUser_args deepCopy() {
            return new addUser_args(this);
        }

        @Override
        public void clear() {
            this.userInfo = null;
        }

        public com.wch.course.thrift.domain.UserInfo getUserInfo() {
            return this.userInfo;
        }

        public addUser_args setUserInfo(com.wch.course.thrift.domain.UserInfo userInfo) {
            this.userInfo = userInfo;
            return this;
        }

        public void unsetUserInfo() {
            this.userInfo = null;
        }

        /** Returns true if field userInfo is set (has been assigned a value) and false otherwise */
        public boolean isSetUserInfo() {
            return this.userInfo != null;
        }

        public void setUserInfoIsSet(boolean value) {
            if (!value) {
                this.userInfo = null;
            }
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
                case USER_INFO:
                    if (value == null) {
                        unsetUserInfo();
                    } else {
                        setUserInfo((com.wch.course.thrift.domain.UserInfo) value);
                    }
                    break;

            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_INFO:
                    return getUserInfo();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case USER_INFO:
                    return isSetUserInfo();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addUser_args)
                return this.equals((addUser_args) that);
            return false;
        }

        public boolean equals(addUser_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_userInfo = true && this.isSetUserInfo();
            boolean that_present_userInfo = true && that.isSetUserInfo();
            if (this_present_userInfo || that_present_userInfo) {
                if (!(this_present_userInfo && that_present_userInfo))
                    return false;
                if (!this.userInfo.equals(that.userInfo))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetUserInfo()) ? 131071 : 524287);
            if (isSetUserInfo())
                hashCode = hashCode * 8191 + userInfo.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(addUser_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetUserInfo()).compareTo(other.isSetUserInfo());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserInfo()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userInfo, other.userInfo);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addUser_args(");
            boolean first = true;

            sb.append("userInfo:");
            if (this.userInfo == null) {
                sb.append("null");
            } else {
                sb.append(this.userInfo);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addUser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addUser_argsStandardScheme getScheme() {
                return new addUser_argsStandardScheme();
            }
        }

        private static class addUser_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addUser_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addUser_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_INFO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.userInfo = new com.wch.course.thrift.domain.UserInfo();
                                struct.userInfo.read(iprot);
                                struct.setUserInfoIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addUser_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.userInfo != null) {
                    oprot.writeFieldBegin(USER_INFO_FIELD_DESC);
                    struct.userInfo.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addUser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addUser_argsTupleScheme getScheme() {
                return new addUser_argsTupleScheme();
            }
        }

        private static class addUser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addUser_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addUser_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetUserInfo()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetUserInfo()) {
                    struct.userInfo.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addUser_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.userInfo = new com.wch.course.thrift.domain.UserInfo();
                    struct.userInfo.read(iprot);
                    struct.setUserInfoIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class addUser_result implements org.apache.thrift.TBase<addUser_result, addUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<addUser_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addUser_result");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addUser_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addUser_resultTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addUser_result.class, metaDataMap);
        }

        public addUser_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addUser_result(addUser_result other) {
        }

        public addUser_result deepCopy() {
            return new addUser_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, java.lang.Object value) {
            switch (field) {
            }
        }

        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof addUser_result)
                return this.equals((addUser_result) that);
            return false;
        }

        public boolean equals(addUser_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(addUser_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("addUser_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addUser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addUser_resultStandardScheme getScheme() {
                return new addUser_resultStandardScheme();
            }
        }

        private static class addUser_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addUser_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addUser_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addUser_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addUser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public addUser_resultTupleScheme getScheme() {
                return new addUser_resultTupleScheme();
            }
        }

        private static class addUser_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addUser_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addUser_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addUser_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

}
