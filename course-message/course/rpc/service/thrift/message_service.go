// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package thrift

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type IMessageService interface {  //消息服务

  // 发送短信
  // 
  // Parameters:
  //  - Mobile
  //  - Message
  SendSMSMessage(ctx context.Context, mobile string, message string) (r bool, err error)
  // 发送邮件
  // 
  // Parameters:
  //  - Email
  //  - Message
  SendEmailMessage(ctx context.Context, email string, message string) (r bool, err error)
}

//消息服务
type IMessageServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewIMessageService instead
func NewIMessageServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *IMessageServiceClient {
  return &IMessageServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewIMessageService instead
func NewIMessageServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *IMessageServiceClient {
  return &IMessageServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewIMessageServiceClient(c thrift.TClient) *IMessageServiceClient {
  return &IMessageServiceClient{
    c: c,
  }
}

// 发送短信
// 
// Parameters:
//  - Mobile
//  - Message
func (p *IMessageServiceClient) SendSMSMessage(ctx context.Context, mobile string, message string) (r bool, err error) {
  var _args0 IMessageServiceSendSMSMessageArgs
  _args0.Mobile = mobile
  _args0.Message = message
  var _result1 IMessageServiceSendSMSMessageResult
  if err = p.c.Call(ctx, "sendSMSMessage", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// 发送邮件
// 
// Parameters:
//  - Email
//  - Message
func (p *IMessageServiceClient) SendEmailMessage(ctx context.Context, email string, message string) (r bool, err error) {
  var _args2 IMessageServiceSendEmailMessageArgs
  _args2.Email = email
  _args2.Message = message
  var _result3 IMessageServiceSendEmailMessageResult
  if err = p.c.Call(ctx, "sendEmailMessage", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

type IMessageServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler IMessageService
}

func (p *IMessageServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *IMessageServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *IMessageServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewIMessageServiceProcessor(handler IMessageService) *IMessageServiceProcessor {

  self4 := &IMessageServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self4.processorMap["sendSMSMessage"] = &iMessageServiceProcessorSendSMSMessage{handler:handler}
  self4.processorMap["sendEmailMessage"] = &iMessageServiceProcessorSendEmailMessage{handler:handler}
return self4
}

func (p *IMessageServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x5.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x5

}

type iMessageServiceProcessorSendSMSMessage struct {
  handler IMessageService
}

func (p *iMessageServiceProcessorSendSMSMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IMessageServiceSendSMSMessageArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sendSMSMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := IMessageServiceSendSMSMessageResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.SendSMSMessage(ctx, args.Mobile, args.Message); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendSMSMessage: " + err2.Error())
    oprot.WriteMessageBegin("sendSMSMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("sendSMSMessage", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type iMessageServiceProcessorSendEmailMessage struct {
  handler IMessageService
}

func (p *iMessageServiceProcessorSendEmailMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IMessageServiceSendEmailMessageArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sendEmailMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := IMessageServiceSendEmailMessageResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.SendEmailMessage(ctx, args.Email, args.Message); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendEmailMessage: " + err2.Error())
    oprot.WriteMessageBegin("sendEmailMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("sendEmailMessage", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Mobile
//  - Message
type IMessageServiceSendSMSMessageArgs struct {
  Mobile string `thrift:"mobile,1" db:"mobile" json:"mobile"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewIMessageServiceSendSMSMessageArgs() *IMessageServiceSendSMSMessageArgs {
  return &IMessageServiceSendSMSMessageArgs{}
}


func (p *IMessageServiceSendSMSMessageArgs) GetMobile() string {
  return p.Mobile
}

func (p *IMessageServiceSendSMSMessageArgs) GetMessage() string {
  return p.Message
}
func (p *IMessageServiceSendSMSMessageArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IMessageServiceSendSMSMessageArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mobile = v
}
  return nil
}

func (p *IMessageServiceSendSMSMessageArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *IMessageServiceSendSMSMessageArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendSMSMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IMessageServiceSendSMSMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mobile", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mobile: ", p), err) }
  if err := oprot.WriteString(string(p.Mobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mobile (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mobile: ", p), err) }
  return err
}

func (p *IMessageServiceSendSMSMessageArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *IMessageServiceSendSMSMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IMessageServiceSendSMSMessageArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IMessageServiceSendSMSMessageResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIMessageServiceSendSMSMessageResult() *IMessageServiceSendSMSMessageResult {
  return &IMessageServiceSendSMSMessageResult{}
}

var IMessageServiceSendSMSMessageResult_Success_DEFAULT bool
func (p *IMessageServiceSendSMSMessageResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return IMessageServiceSendSMSMessageResult_Success_DEFAULT
  }
return *p.Success
}
func (p *IMessageServiceSendSMSMessageResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IMessageServiceSendSMSMessageResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IMessageServiceSendSMSMessageResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IMessageServiceSendSMSMessageResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendSMSMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IMessageServiceSendSMSMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IMessageServiceSendSMSMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IMessageServiceSendSMSMessageResult(%+v)", *p)
}

// Attributes:
//  - Email
//  - Message
type IMessageServiceSendEmailMessageArgs struct {
  Email string `thrift:"email,1" db:"email" json:"email"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewIMessageServiceSendEmailMessageArgs() *IMessageServiceSendEmailMessageArgs {
  return &IMessageServiceSendEmailMessageArgs{}
}


func (p *IMessageServiceSendEmailMessageArgs) GetEmail() string {
  return p.Email
}

func (p *IMessageServiceSendEmailMessageArgs) GetMessage() string {
  return p.Message
}
func (p *IMessageServiceSendEmailMessageArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IMessageServiceSendEmailMessageArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *IMessageServiceSendEmailMessageArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *IMessageServiceSendEmailMessageArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendEmailMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IMessageServiceSendEmailMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:email: ", p), err) }
  return err
}

func (p *IMessageServiceSendEmailMessageArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *IMessageServiceSendEmailMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IMessageServiceSendEmailMessageArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IMessageServiceSendEmailMessageResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIMessageServiceSendEmailMessageResult() *IMessageServiceSendEmailMessageResult {
  return &IMessageServiceSendEmailMessageResult{}
}

var IMessageServiceSendEmailMessageResult_Success_DEFAULT bool
func (p *IMessageServiceSendEmailMessageResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return IMessageServiceSendEmailMessageResult_Success_DEFAULT
  }
return *p.Success
}
func (p *IMessageServiceSendEmailMessageResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IMessageServiceSendEmailMessageResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IMessageServiceSendEmailMessageResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IMessageServiceSendEmailMessageResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendEmailMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IMessageServiceSendEmailMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IMessageServiceSendEmailMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IMessageServiceSendEmailMessageResult(%+v)", *p)
}


